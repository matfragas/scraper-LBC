import os
import sys
import traceback
import requests
from bs4 import BeautifulSoup
from notion_client import Client

def fetch_annonces(url):
    print("üì• √âtape 1 - T√©l√©chargement de la page :")
    print(f"üîó URL cible : {url}")
    try:
        response = requests.get(url, headers={"User-Agent": "Mozilla/5.0"})
        response.raise_for_status()
        print("‚úÖ Page t√©l√©charg√©e avec succ√®s")
        return response.text
    except Exception as e:
        print("‚ùå Erreur pendant le t√©l√©chargement de la page :", e)
        traceback.print_exc()
        sys.exit(1)

def parse_annonces(html):
    print("üîé √âtape 2 - Parsing du HTML")
    try:
        soup = BeautifulSoup(html, "html.parser")
        annonces = []

        cards = soup.find_all("a", class_="clearfix trackable")
        print(f"üì¶ {len(cards)} annonces trouv√©es")

        for card in cards:
            title = card.find("span", class_="title").text.strip() if card.find("span", class_="title") else "Sans titre"
            price = card.find("h3", class_="item_price").text.strip() if card.find("h3", class_="item_price") else "Sans prix"
            location = card.find("span", class_="item_supp").text.strip() if card.find("span", class_="item_supp") else "Sans localisation"
            url = f"https://www.leboncoin.fr{card['href']}" if card.get('href') else "URL manquante"

            annonces.append({
                "title": title,
                "price": price,
                "location": location,
                "url": url
            })
        print("‚úÖ Parsing termin√©")
        return annonces
    except Exception as e:
        print("‚ùå Erreur pendant le parsing :", e)
        traceback.print_exc()
        sys.exit(1)

def send_to_notion(annonces):
    print("üß† √âtape 3 - Envoi des donn√©es √† Notion")
    NOTION_SECRET = os.getenv("NOTION_SECRET")
    DATABASE_ID = os.getenv("DATABASE_ID")

    if not NOTION_SECRET or not DATABASE_ID:
        print("‚ùå Les variables d'environnement NOTION_SECRET ou DATABASE_ID sont manquantes")
        sys.exit(1)

    try:
        notion = Client(auth=NOTION_SECRET)
        print(f"üîê Connexion √† Notion OK ‚Äî Base : {DATABASE_ID}")
        
        for annonce in annonces:
            print(f"üì§ Envoi de l'annonce : {annonce['title']}")

            response = notion.pages.create(
                parent={"database_id": DATABASE_ID},
                properties={
                    "Titre": {"title": [{"text": {"content": annonce["title"]}}]},
                    "Prix": {"rich_text": [{"text": {"content": annonce["price"]}}]},
                    "Ville": {"rich_text": [{"text": {"content": annonce["location"]}}]},
                    "URL": {"url": annonce["url"]},
                }
            )
        print("‚úÖ Toutes les annonces ont √©t√© envoy√©es √† Notion")

    except Exception as e:
        print("‚ùå Erreur pendant l'envoi √† Notion :", e)
        traceback.print_exc()
        sys.exit(1)

def main():
    try:
        print("üöÄ Lancement du scraper LeBonCoin")
        url = os.getenv("LBC_URL")
        print("URL r√©cup√©r√©e depuis LBC_URL :", url)
        if not url:
            print("‚ùå La variable d‚Äôenvironnement LBC_URL est manquante")
            print("‚ùå LBC_URL est vide ou non d√©fini")
            print("Environnement complet :", dict(os.environ))
            sys.exit(1)

        print("‚úÖ URL r√©cup√©r√©e depuis LBC_URL :", url)
        html = fetch_annonces(url)
        annonces = parse_annonces(html)
        send_to_notion(annonces)
        print("üéâ Script termin√© avec succ√®s")

    except Exception as e:
        print("‚ùå Erreur g√©n√©rale du script :", e)
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
